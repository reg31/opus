name: Build Opus Library
env:
  OPUS_REPO: 'https://github.com/xiph/opus.git'
  OPUS_BRANCH: 'main'
  SNAPSHOT_TAG: 'daily-snapshot'
  NO_STRIP_BUILD_FLAGS: -DCMAKE_CXX_FLAGS_RELEASE="-O2 -DNDEBUG" -DCMAKE_C_FLAGS_RELEASE="-O2 -DNDEBUG"
  WITH_STRIP_BUILD_FLAGS: -DCMAKE_CXX_FLAGS_RELEASE="-O2 -DNDEBUG -s" -DCMAKE_C_FLAGS_RELEASE="-O2 -DNDEBUG -s"
  
on:
  workflow_dispatch:
    inputs:
      opus_branch:
        description: 'Opus branch/tag to build'
        required: true
        default: "main"
        type: string
  schedule:
    - cron: '0 0 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      opus_branch: ${{ steps.set-branch.outputs.opus_branch }}
      opus_version: ${{ steps.get-version.outputs.opus_version }}
    steps:
      - name: Set branch
        id: set-branch
        run: |
          if [ "${{ github.event.inputs.opus_branch }}" != "" ]; then
            echo "opus_branch=${{ github.event.inputs.opus_branch }}" >> $GITHUB_OUTPUT
          else
            echo "opus_branch=${{ env.OPUS_BRANCH }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout Opus
        uses: actions/checkout@v5
        with:
          repository: xiph/opus
          ref: ${{ steps.set-branch.outputs.opus_branch }}
          fetch-depth: 0
          path: opus-src

      - name: Get Opus version
        id: get-version
        working-directory: opus-src
        run: |
          VERSION=$(git describe --tags --always 2>/dev/null || echo "unknown")
          echo "opus_version=$VERSION" >> $GITHUB_OUTPUT

  build-android:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm, arm64]
        include:
          - arch: arm
            android_abi: armeabi-v7a
          - arch: arm64
            android_abi: arm64-v8a
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          repository: xiph/opus
          ref: ${{ needs.setup.outputs.opus_branch }}
          fetch-depth: 0
          
      - name: Set up JDK
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '24'
      
      - name: Set up environment variables
        run: |
          echo "OUTPUT_DIR=$(pwd)/output/${{ matrix.android_abi }}" >> $GITHUB_ENV
          echo "PACKAGE_DIR=$(pwd)/build" >> $GITHUB_ENV
      
      - name: Configure and build
        run: |
          mkdir -p build
          cd build
          
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${{ matrix.android_abi }} \
            -DANDROID_PLATFORM=android-${{ env.ANDROID_API }} \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=ON \
            -DOPUS_PRESUME_NEON=ON \
            -DOPUS_BUILD_PROGRAMS=OFF \
            -DOPUS_CUSTOM_MODES=OFF \
            -DBUILD_TESTING=OFF \
            -DDANDROID_PLATFORM=35 \
            -DCMAKE_INSTALL_PREFIX=${{ env.OUTPUT_DIR }} \
            ${{ env.NO_STRIP_BUILD_FLAGS }}
          
          make -j$(nproc)
          make install
          
      - name: Package libraries
        run: |
          mkdir -p ${{ env.PACKAGE_DIR }}
          
          TEMP_DIR=$(mktemp -d)
          mkdir -p $TEMP_DIR/lib
          export ANDROID_NDK_BIN=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin
          
          # Copy only .so files from the lib directory
          find ${{ env.OUTPUT_DIR }}/lib -name "*.so" -type f -exec cp {} $TEMP_DIR/lib/ \;
          
          # Strip the libraries
          find $TEMP_DIR/lib -name "*.so" -exec $ANDROID_NDK_BIN/llvm-strip --strip-all {} \;
          
          # Copy header files from install directory
          mkdir -p $TEMP_DIR/include
          cp -r ${{ env.OUTPUT_DIR }}/include/* $TEMP_DIR/include/
          
          # Create packages
          7z a "opus-android-${{ matrix.android_abi }}-${{ needs.setup.outputs.opus_version }}.zip" $TEMP_DIR/*
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: opus-android-${{ matrix.android_abi }}
          path: opus-android-${{ matrix.android_abi }}-${{ needs.setup.outputs.opus_version }}.zip
          retention-days: 5
          
  build-ios:
    needs: setup
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          repository: xiph/opus
          ref: ${{ needs.setup.outputs.opus_branch }}
          fetch-depth: 0
      
      - name: Install dependencies
        run: brew install autoconf automake libtool

      - name: Setup xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      - name: Set up environment variables
        run: echo "OUTPUT_DIR=$(pwd)/output/ios" >> $GITHUB_ENV
        
      - name: Configure and build
        run: |
          mkdir -p build
          cd build
          
          cmake .. -G "Unix Makefiles" \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_SYSTEM_NAME=iOS \
            -DOPUS_CUSTOM_MODES=OFF \
            -DOPUS_BUILD_PROGRAMS=OFF \
            -DBUILD_TESTING=OFF \
            -DOPUS_PRESUME_NEON=ON \
            -DCMAKE_OSX_ARCHITECTURES="arm64" \
            -DCMAKE_C_FLAGS="-march=armv8.2-a+dotprod" \
            -DCMAKE_CXX_FLAGS="-march=armv8.2-a+dotprod" \
            -DCMAKE_INSTALL_PREFIX=${{ env.OUTPUT_DIR }}
          
          make -j$(sysctl -n hw.ncpu)
          make install
          
      - name: Package libraries
        run: |
          PACKAGE_DIR=$(pwd)/package
          mkdir -p $PACKAGE_DIR/lib
          
          # Copy only .a files from the lib directory
          find ${{ env.OUTPUT_DIR }}/lib -name "*.a" -type f -exec cp {} $PACKAGE_DIR/lib/ \;
          
          # Copy header files
          mkdir -p $PACKAGE_DIR/include
          cp -r ${{ env.OUTPUT_DIR }}/include/* $PACKAGE_DIR/include/
          
          # Create package
          7z a opus-ios-arm64-${{ needs.setup.outputs.opus_version }}.zip ./package/*
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: opus-ios-arm64
          path: opus-ios-arm64-${{ needs.setup.outputs.opus_version }}.zip
          retention-days: 5
          
  build-macos:
    needs: setup
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          repository: xiph/opus
          ref: ${{ needs.setup.outputs.opus_branch }}
          fetch-depth: 0
      
      - name: Install dependencies
        run: brew install autoconf automake libtool

      - name: Setup xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
        
      - name: Set up environment variables
        run: echo "OUTPUT_DIR=$(pwd)/output/macos" >> $GITHUB_ENV
        
      - name: Configure and build
        run: |
          mkdir -p build
          cd build
          
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DOPUS_CUSTOM_MODES=OFF \
            -DOPUS_BUILD_PROGRAMS=OFF \
            -DBUILD_TESTING=OFF \
            -DOPUS_PRESUME_NEON=ON \
            -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" \
            -DCMAKE_INSTALL_PREFIX=${{ env.OUTPUT_DIR }}
          
          make -j$(sysctl -n hw.ncpu)
          make install
          
      - name: Package libraries
        run: |
          PACKAGE_DIR=$(pwd)/package
          mkdir -p $PACKAGE_DIR/lib
          
          # Copy only .a files from the lib directory
          find ${{ env.OUTPUT_DIR }}/lib -name "*.a" -type f -exec cp {} $PACKAGE_DIR/lib/ \;
          
          # Copy header files
          mkdir -p $PACKAGE_DIR/include
          cp -r ${{ env.OUTPUT_DIR }}/include/* $PACKAGE_DIR/include/
          
          # Create package
          7z a opus-macos-${{ needs.setup.outputs.opus_version }}.zip ./package/*
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: opus-macos
          path: opus-macos-${{ needs.setup.outputs.opus_version }}.zip
          retention-days: 5
          
  build-windows-mingw:
    needs: setup
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          repository: xiph/opus
          ref: ${{ needs.setup.outputs.opus_branch }}
          fetch-depth: 0
      
      - name: Install dependencies
        run: choco install -y wget

      - name: Download mingw
        shell: cmd
        run: |
          set MINGW_ARCHIVE=x86_64-15.1.0-release-posix-seh-ucrt-rt_v12-rev0.7z
          wget https://github.com/niXman/mingw-builds-binaries/releases/download/15.1.0-rt_v12-rev0/%MINGW_ARCHIVE%
          7z x %MINGW_ARCHIVE%
        
      - name: Configure and build
        shell: cmd
        run: |
          set "OUTPUT_DIR=%CD%\install"
          set "CC=%CD%\mingw64\bin\gcc"
          set "CXX=%CD%\mingw64\bin\g++"   
          
          mkdir -p build
          cd build
          
          cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DOPUS_BUILD_PROGRAMS=OFF -DBUILD_SHARED_LIBS=ON ^
            -DOPUS_CUSTOM_MODES=OFF -DBUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX="%OUTPUT_DIR%" ${{ env.WITH_STRIP_BUILD_FLAGS }}

      - name: Build Opus for Windows
        shell: cmd
        run: |
          cd build
          cmake --build . -j%NUMBER_OF_PROCESSORS%
          cmake --install .

      - name: Package artifacts
        shell: cmd
        run: 7z a "opus-windows-mingw-${{ needs.setup.outputs.opus_version }}.zip" .\install\* -x!.\install\lib
        
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: opus-windows-mingw
          path: opus-windows-mingw-${{ needs.setup.outputs.opus_version }}.zip
          retention-days: 5
          
  release:
    needs: [setup, build-android, build-ios, build-macos, build-windows-mingw]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: opus-builds
          
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.run_id }}
          name: "Opus Library - Daily Build"
          body: |
            Automated daily build of Opus ${{ needs.setup.outputs.opus_version }}
            
            This build includes binaries for:
            - Android (armeabi-v7a, arm64-v8a)
            - iOS (arm64)
            - macOS
            - Windows (MinGW)
            
            **Note:** This snapshot may be overwritten by newer daily builds.
          files: |
            opus-builds/opus-android-armeabi-v7a/opus-android-armeabi-v7a-*.zip
            opus-builds/opus-android-arm64-v8a/opus-android-arm64-v8a-*.zip
            opus-builds/opus-ios-arm64/opus-ios-arm64-*.zip
            opus-builds/opus-macos/opus-macos-*.zip
            opus-builds/opus-windows-mingw/opus-windows-mingw-*.zip

      - name: Cleanup repository
        uses: dev-drprasad/delete-older-releases@v0.3.4
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
