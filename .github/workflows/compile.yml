name: Build Opus Library
env:
  OPUS_REPO: 'https://github.com/xiph/opus.git'
  OPUS_BRANCH: 'main'
  SNAPSHOT_TAG: 'daily-snapshot'

on:
  workflow_dispatch:
    inputs:
      opus_branch:
        description: 'Opus branch/tag to build'
        required: true
        default: "main"
        type: string
  schedule:
    - cron: '0 0 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      opus_branch: ${{ steps.set-branch.outputs.opus_branch }}
      opus_version: ${{ steps.get-version.outputs.opus_version }}
    steps:
      - name: Set branch
        id: set-branch
        run: |
          if [ "${{ github.event.inputs.opus_branch }}" != "" ]; then
            echo "opus_branch=${{ github.event.inputs.opus_branch }}" >> $GITHUB_OUTPUT
          else
            echo "opus_branch=${{ env.OPUS_BRANCH }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout Opus
        uses: actions/checkout@v4
        with:
          repository: xiph/opus
          ref: ${{ steps.set-branch.outputs.opus_branch }}
          fetch-depth: 0
          path: opus-src

      - name: Get Opus version
        id: get-version
        working-directory: opus-src
        run: |
          VERSION=$(git describe --tags --always 2>/dev/null || echo "unknown")
          echo "opus_version=$VERSION" >> $GITHUB_OUTPUT

  build-android:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm, arm64]
        include:
          - arch: arm
            android_abi: armeabi-v7a
          - arch: arm64
            android_abi: arm64-v8a
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: xiph/opus
          ref: ${{ needs.setup.outputs.opus_branch }}
          fetch-depth: 0
          
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'
      
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential git perl make curl llvm
      
      - name: Download NDK
        run: |
          mkdir -p ${ANDROID_HOME}/ndk
          cd ${ANDROID_HOME}/ndk
          curl -O https://dl.google.com/android/repository/android-ndk-r28-linux.zip
          unzip -q android-ndk-r28-linux.zip
          echo "ANDROID_NDK_HOME=${ANDROID_HOME}/ndk/android-ndk-r28" >> $GITHUB_ENV
      
      - name: Set up environment variables
        run: |
          echo "ANDROID_API=35" >> $GITHUB_ENV
          echo "OUTPUT_DIR=$(pwd)/output/${{ matrix.android_abi }}" >> $GITHUB_ENV
          echo "PACKAGE_DIR=$(pwd)/build" >> $GITHUB_ENV
      
      - name: Configure and build
        run: |
          mkdir -p build
          cd build
          
          export ANDROID_NDK_ROOT=$ANDROID_NDK_HOME
          export PATH=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
          
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${{ matrix.android_abi }} \
            -DANDROID_PLATFORM=android-${{ env.ANDROID_API }} \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=ON \
            -DOPUS_PRESUME_NEON=ON \
            -DOPUS_BUILD_PROGRAMS=OFF \
            -DOPUS_CUSTOM_MODES=OFF \
            -DBUILD_TESTING=OFF \
            -DCMAKE_INSTALL_PREFIX=${{ env.OUTPUT_DIR }}
          
          make -j$(nproc)
          make install
          
      - name: Package libraries
        run: |
          mkdir -p ${{ env.PACKAGE_DIR }}
          
          TEMP_DIR=$(mktemp -d)
          mkdir -p $TEMP_DIR/lib/${{ matrix.android_abi }}
          
          # Copy installed libraries
          cp -r ${{ env.OUTPUT_DIR }}/lib/* $TEMP_DIR/lib/${{ matrix.android_abi }}/
          
          # Strip the libraries
          find $TEMP_DIR/lib/${{ matrix.android_abi }} -name "*.so" -exec llvm-strip --strip-all {} \;
          
          # Copy header files from install directory
          mkdir -p $TEMP_DIR/include/opus
          cp -r ${{ env.OUTPUT_DIR }}/include/* $TEMP_DIR/include/opus/
          
          # Create packages
          PACKAGE_NAME="opus-android-${{ matrix.android_abi }}-${{ needs.setup.outputs.opus_version }}"
          cd $TEMP_DIR
          zip -r ${{ env.PACKAGE_DIR }}/$PACKAGE_NAME.zip .
          tar -czf ${{ env.PACKAGE_DIR }}/$PACKAGE_NAME.tar.gz .
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: opus-android-${{ matrix.android_abi }}
          path: build/opus-android-${{ matrix.android_abi }}-${{ needs.setup.outputs.opus_version }}.zip
          
  build-ios:
    needs: setup
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: xiph/opus
          ref: ${{ needs.setup.outputs.opus_branch }}
          fetch-depth: 0
      
      - name: Install dependencies
        run: brew install autoconf automake libtool
      
      - name: Set up environment variables
        run: echo "OUTPUT_DIR=$(pwd)/output/ios" >> $GITHUB_ENV
        
      - name: Configure and build
        run: |
          mkdir -p build
          cd build
          
          cmake .. -G "Unix Makefiles" \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_SYSTEM_NAME=iOS \
            -DOPUS_CUSTOM_MODES=OFF \
            -DOPUS_BUILD_PROGRAMS=OFF \
            -DBUILD_TESTING=OFF \
            -DOPUS_PRESUME_NEON=ON \
            -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DCMAKE_INSTALL_PREFIX=${{ env.OUTPUT_DIR }}
          
          make -j$(sysctl -n hw.ncpu)
          make install
          
      - name: Package libraries
        run: |
          PACKAGE_DIR=$(pwd)/package
          mkdir -p $PACKAGE_DIR/lib/ios
          
          # Copy installed libraries
          cp -r ${{ env.OUTPUT_DIR }}/lib/* $PACKAGE_DIR/lib/ios/
          
          # Copy header files
          mkdir -p $PACKAGE_DIR/include/opus
          cp -r ${{ env.OUTPUT_DIR }}/include/* $PACKAGE_DIR/include/opus/
          
          # Create package
          cd $PACKAGE_DIR
          zip -r ../opus-ios-arm64-${{ needs.setup.outputs.opus_version }}.zip .
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: opus-ios-arm64
          path: opus-ios-arm64-${{ needs.setup.outputs.opus_version }}.zip
          
  build-macos:
    needs: setup
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: xiph/opus
          ref: ${{ needs.setup.outputs.opus_branch }}
          fetch-depth: 0
      
      - name: Install dependencies
        run: brew install autoconf automake libtool
        
      - name: Set up environment variables
        run: echo "OUTPUT_DIR=$(pwd)/output/macos" >> $GITHUB_ENV
        
      - name: Configure and build
        run: |
          mkdir -p build
          cd build
          
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DOPUS_CUSTOM_MODES=OFF \
            -DOPUS_BUILD_PROGRAMS=OFF \
            -DBUILD_TESTING=OFF \
            -DOPUS_PRESUME_NEON=ON \
            -DCMAKE_INSTALL_PREFIX=${{ env.OUTPUT_DIR }}
          
          make -j$(sysctl -n hw.ncpu)
          make install
          
      - name: Package libraries
        run: |
          PACKAGE_DIR=$(pwd)/package
          mkdir -p $PACKAGE_DIR/lib/macos
          
          # Copy installed libraries
          cp -r ${{ env.OUTPUT_DIR }}/lib/* $PACKAGE_DIR/lib/macos/
          
          # Copy header files
          mkdir -p $PACKAGE_DIR/include/opus
          cp -r ${{ env.OUTPUT_DIR }}/include/* $PACKAGE_DIR/include/opus/
          
          # Create package
          cd $PACKAGE_DIR
          zip -r ../opus-macos-${{ needs.setup.outputs.opus_version }}.zip .
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: opus-macos
          path: opus-macos-${{ needs.setup.outputs.opus_version }}.zip
          
  build-windows-mingw:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: xiph/opus
          ref: ${{ needs.setup.outputs.opus_branch }}
          fetch-depth: 0
      
      - name: Install MINGW
        run: sudo apt-get install -y mingw-w64
        
      - name: Set up environment variables
        run: echo "OUTPUT_DIR=$(pwd)/output/windows" >> $GITHUB_ENV
        
      - name: Configure and build
        run: |
          mkdir -p build
          cd build
          
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DOPUS_BUILD_PROGRAMS=OFF \
            -DBUILD_SHARED_LIBS=ON \
            -DOPUS_CUSTOM_MODES=OFF \
            -DBUILD_TESTING=OFF \
            -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_C_FLAGS="-s" \
            -DCMAKE_CXX_FLAGS="-s" \
            -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc \
            -DCMAKE_INSTALL_PREFIX=${{ env.OUTPUT_DIR }}
          
          make -j$(nproc)
          make install
          
      - name: Package libraries
        run: |
          PACKAGE_DIR=$(pwd)/package
          mkdir -p $PACKAGE_DIR/bin/windows
          mkdir -p $PACKAGE_DIR/lib/windows
          
          # Copy DLLs and libs
          cp -r ${{ env.OUTPUT_DIR }}/bin/* $PACKAGE_DIR/bin/windows/
          cp -r ${{ env.OUTPUT_DIR }}/lib/* $PACKAGE_DIR/lib/windows/
          
          # Copy header files
          mkdir -p $PACKAGE_DIR/include/opus
          cp -r ${{ env.OUTPUT_DIR }}/include/* $PACKAGE_DIR/include/opus/
          
          # Create package
          cd $PACKAGE_DIR
          zip -r ../opus-windows-mingw-${{ needs.setup.outputs.opus_version }}.zip .
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: opus-windows-mingw
          path: opus-windows-mingw-${{ needs.setup.outputs.opus_version }}.zip
          
  release:
    needs: [setup, build-android, build-ios, build-macos, build-windows-mingw]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: opus-builds
          
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.SNAPSHOT_TAG }}
          name: "Opus Library - Daily Build"
          body: |
            Automated daily build of Opus ${{ needs.setup.outputs.opus_version }}
            
            This build includes binaries for:
            - Android (armeabi-v7a, arm64-v8a)
            - iOS (arm64)
            - macOS
            - Windows (MinGW)
            
            **Note:** This snapshot may be overwritten by newer daily builds.
          files: |
            opus-builds/opus-android-armeabi-v7a/opus-android-armeabi-v7a-*.zip
            opus-builds/opus-android-arm64-v8a/opus-android-arm64-v8a-*.zip
            opus-builds/opus-ios-arm64/opus-ios-arm64-*.zip
            opus-builds/opus-macos/opus-macos-*.zip
            opus-builds/opus-windows-mingw/opus-windows-mingw-*.zip
          prerelease: true
          delete_after: "3d"
