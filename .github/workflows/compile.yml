name: Build Opus Library
env:
  OPUS_REPO: 'https://github.com/xiph/opus.git'
  OPUS_BRANCH: 'main'
  SNAPSHOT_TAG: 'daily-snapshot'

on:
  workflow_dispatch:  # Manual trigger
    inputs:
      opus_branch:
        description: 'Opus branch/tag to build'
        required: true
        default: "master"
        type: string
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      opus_branch: ${{ steps.set-branch.outputs.opus_branch }}
      opus_version: ${{ steps.get-version.outputs.opus_version }}
    steps:
      - name: Set branch
        id: set-branch
        run: |
          if [ "${{ github.event.inputs.opus_branch }}" != "" ]; then
            echo "opus_branch=${{ github.event.inputs.opus_branch }}" >> $GITHUB_OUTPUT
          else
            echo "opus_branch=${{ env.OPUS_BRANCH }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout Opus
        uses: actions/checkout@v4
        with:
          repository: xiph/opus
          ref: ${{ steps.set-branch.outputs.opus_branch }}
          fetch-depth: 0
          path: opus-src

      - name: Get Opus version
        id: get-version
        working-directory: opus-src
        run: |
          # Get version from git describe or fallback to generic version
          VERSION=$(git describe --tags --always 2>/dev/null || echo "unknown")
          echo "opus_version=$VERSION" >> $GITHUB_OUTPUT

  build-android:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [armv7, arm64]
        include:
          - arch: armv7
            android_abi: armeabi-v7a
            cmake_arch: "-DANDROID_ABI=armeabi-v7a"
          - arch: arm64
            android_abi: arm64-v8a
            cmake_arch: "-DANDROID_ABI=arm64-v8a"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: xiph/opus
          ref: ${{ needs.setup.outputs.opus_branch }}
          fetch-depth: 0
          
      - name: Download models
        run: ./autogen.sh
          
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
      
      - name: Create Work Dir
        run: mkdir build
      
      - name: Configure and Build
        run: |
          cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=${ANDROID_HOME}/ndk/25.2.9519653/build/cmake/android.toolchain.cmake ${{ matrix.cmake_arch }} -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON
          cmake --build . -j$(nproc) --config Release
          
      - name: Package libraries
        run: |
          PACKAGE_DIR=$(pwd)/package
          mkdir -p $PACKAGE_DIR/lib/${{ matrix.android_abi }}
          
          # Copy shared libraries to package directory
          find ./build -name "*.so" -type f -exec cp {} $PACKAGE_DIR/lib/${{ matrix.android_abi }}/ \;
          
          # Copy header files
          mkdir -p $PACKAGE_DIR/include
          cp -r include/* $PACKAGE_DIR/include/
          
          # Create zip file
          cd $PACKAGE_DIR
          zip -r ../opus-android-${{ matrix.android_abi }}-${{ needs.setup.outputs.opus_version }}.zip .
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: opus-android-${{ matrix.android_abi }}
          path: opus-android-${{ matrix.android_abi }}-${{ needs.setup.outputs.opus_version }}.zip
          
  build-ios:
    needs: setup
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: xiph/opus
          ref: ${{ needs.setup.outputs.opus_branch }}
          fetch-depth: 0
      
      - name: Install dependencies
        run: brew install autoconf automake libtool
      
      - name: Download models
        run: ./autogen.sh
        
      - name: Create Work Dir
        run: mkdir build
        
      - name: Configure and Build for iOS arm64
        working-directory: ./build
        run: |
          cmake .. -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_ARCHITECTURES=arm64
          cmake --build . -j 2 --config Release
          
      - name: Package libraries
        run: |
          PACKAGE_DIR=$(pwd)/package
          mkdir -p $PACKAGE_DIR/lib/ios
          
          # Copy libraries to package directory
          find ./build -name "*.dylib" -o -name "*.a" -type f -exec cp {} $PACKAGE_DIR/lib/ios/ \;
          
          # Copy header files
          mkdir -p $PACKAGE_DIR/include
          cp -r include/* $PACKAGE_DIR/include/
          
          # Create zip file
          cd $PACKAGE_DIR
          zip -r ../opus-ios-arm64-${{ needs.setup.outputs.opus_version }}.zip .
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: opus-ios-arm64
          path: opus-ios-arm64-${{ needs.setup.outputs.opus_version }}.zip
          
  build-macos:
    needs: setup
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: xiph/opus
          ref: ${{ needs.setup.outputs.opus_branch }}
          fetch-depth: 0
      
      - name: Install dependencies
        run: brew install autoconf automake libtool
        
      - name: Download models
        run: ./autogen.sh
        
      - name: Create Work Dir
        run: mkdir build
        
      - name: Configure and Build
        working-directory: ./build
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON
          cmake --build . -j 2 --config Release
          
      - name: Package libraries
        run: |
          PACKAGE_DIR=$(pwd)/package
          mkdir -p $PACKAGE_DIR/lib/macos
          
          # Copy libraries to package directory
          find ./build -name "*.dylib" -o -name "*.a" -type f -exec cp {} $PACKAGE_DIR/lib/macos/ \;
          
          # Copy header files
          mkdir -p $PACKAGE_DIR/include
          cp -r include/* $PACKAGE_DIR/include/
          
          # Create zip file
          cd $PACKAGE_DIR
          zip -r ../opus-macos-${{ needs.setup.outputs.opus_version }}.zip .
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: opus-macos
          path: opus-macos-${{ needs.setup.outputs.opus_version }}.zip
          
  build-windows-mingw:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: xiph/opus
          ref: ${{ needs.setup.outputs.opus_branch }}
          fetch-depth: 0
      
      - name: Install MINGW
        run: sudo apt-get install -y mingw-w64
        
      - name: Download models
        run: ./autogen.sh
        
      - name: Create Work Dir
        run: mkdir build
        
      - name: Configure and Build
        working-directory: ./build
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=Release -DOPUS_BUILD_PROGRAMS=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc
          cmake --build . -j 2 --config Release
          
      - name: Package libraries
        run: |
          PACKAGE_DIR=$(pwd)/package
          mkdir -p $PACKAGE_DIR/lib/windows
          
          # Copy DLLs and libs to package directory
          find ./build -name "*.dll" -o -name "*.lib" -o -name "*.a" -type f -exec cp {} $PACKAGE_DIR/lib/windows/ \;
          
          # Copy header files
          mkdir -p $PACKAGE_DIR/include
          cp -r include/* $PACKAGE_DIR/include/
          
          # Create zip file
          cd $PACKAGE_DIR
          zip -r ../opus-windows-mingw-${{ needs.setup.outputs.opus_version }}.zip .
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: opus-windows-mingw
          path: opus-windows-mingw-${{ needs.setup.outputs.opus_version }}.zip
          
  release:
    needs: [setup, build-android, build-ios, build-macos, build-windows-mingw]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: opus-builds
          
      - name: List downloaded artifacts
        run: ls -R opus-builds
          
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.SNAPSHOT_TAG }}
          name: "Opus Library - Daily Build"
          body: |
            Automated daily build of Opus ${{ needs.setup.outputs.opus_version }}
            Built on: ${{ github.run_id }}
            
            This build includes binaries for:
            - Android (armeabi-v7a, arm64-v8a)
            - iOS (arm64)
            - macOS
            - Windows (MinGW)
          files: |
            opus-builds/opus-android-armeabi-v7a/opus-android-armeabi-v7a-*.zip
            opus-builds/opus-android-arm64-v8a/opus-android-arm64-v8a-*.zip
            opus-builds/opus-ios-arm64/opus-ios-arm64-*.zip
            opus-builds/opus-macos/opus-macos-*.zip
            opus-builds/opus-windows-mingw/opus-windows-mingw-*.zip
          prerelease: true
